// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	types "github.com/barcostreams/barco/internal/types"
	mock "github.com/stretchr/testify/mock"
)

// Datalog is an autogenerated mock type for the Datalog type
type Datalog struct {
	mock.Mock
}

// Init provides a mock function with given fields:
func (_m *Datalog) Init() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReadFileFrom provides a mock function with given fields: buf, maxSize, segmentId, startOffset, maxRecords, topic
func (_m *Datalog) ReadFileFrom(buf []byte, maxSize int, segmentId int64, startOffset int64, maxRecords int, topic *types.TopicDataId) ([]byte, error) {
	ret := _m.Called(buf, maxSize, segmentId, startOffset, maxRecords, topic)

	var r0 []byte
	if rf, ok := ret.Get(0).(func([]byte, int, int64, int64, int, *types.TopicDataId) []byte); ok {
		r0 = rf(buf, maxSize, segmentId, startOffset, maxRecords, topic)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]byte, int, int64, int64, int, *types.TopicDataId) error); ok {
		r1 = rf(buf, maxSize, segmentId, startOffset, maxRecords, topic)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadProducerOffset provides a mock function with given fields: topicId
func (_m *Datalog) ReadProducerOffset(topicId *types.TopicDataId) (int64, error) {
	ret := _m.Called(topicId)

	var r0 int64
	if rf, ok := ret.Get(0).(func(*types.TopicDataId) int64); ok {
		r0 = rf(topicId)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*types.TopicDataId) error); ok {
		r1 = rf(topicId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReleaseStreamBuffer provides a mock function with given fields: buf
func (_m *Datalog) ReleaseStreamBuffer(buf []byte) {
	_m.Called(buf)
}

// SegmentFileList provides a mock function with given fields: topic, maxOffset
func (_m *Datalog) SegmentFileList(topic *types.TopicDataId, maxOffset int64) ([]int64, error) {
	ret := _m.Called(topic, maxOffset)

	var r0 []int64
	if rf, ok := ret.Get(0).(func(*types.TopicDataId, int64) []int64); ok {
		r0 = rf(topic, maxOffset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int64)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*types.TopicDataId, int64) error); ok {
		r1 = rf(topic, maxOffset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StreamBuffer provides a mock function with given fields:
func (_m *Datalog) StreamBuffer() []byte {
	ret := _m.Called()

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

type mockConstructorTestingTNewDatalog interface {
	mock.TestingT
	Cleanup(func())
}

// NewDatalog creates a new instance of Datalog. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDatalog(t mockConstructorTestingTNewDatalog) *Datalog {
	mock := &Datalog{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
