// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	types "github.com/barcostreams/barco/internal/types"
	mock "github.com/stretchr/testify/mock"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *Client) Close() {
	_m.Called()
}

// CommitGeneration provides a mock function with given fields: gen1, gen2
func (_m *Client) CommitGeneration(gen1 *types.Generation, gen2 *types.Generation) error {
	ret := _m.Called(gen1, gen2)

	var r0 error
	if rf, ok := ret.Get(0).(func(*types.Generation, *types.Generation) error); ok {
		r0 = rf(gen1, gen2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DbWasNewlyCreated provides a mock function with given fields:
func (_m *Client) DbWasNewlyCreated() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// GenerationInfo provides a mock function with given fields: token, version
func (_m *Client) GenerationInfo(token types.Token, version types.GenVersion) (*types.Generation, error) {
	ret := _m.Called(token, version)

	var r0 *types.Generation
	if rf, ok := ret.Get(0).(func(types.Token, types.GenVersion) *types.Generation); ok {
		r0 = rf(token, version)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Generation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(types.Token, types.GenVersion) error); ok {
		r1 = rf(token, version)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GenerationsByParent provides a mock function with given fields: gen
func (_m *Client) GenerationsByParent(gen *types.Generation) ([]types.Generation, error) {
	ret := _m.Called(gen)

	var r0 []types.Generation
	if rf, ok := ret.Get(0).(func(*types.Generation) []types.Generation); ok {
		r0 = rf(gen)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Generation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*types.Generation) error); ok {
		r1 = rf(gen)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGenerationsByToken provides a mock function with given fields: token, clusterSize
func (_m *Client) GetGenerationsByToken(token types.Token, clusterSize int) ([]types.Generation, error) {
	ret := _m.Called(token, clusterSize)

	var r0 []types.Generation
	if rf, ok := ret.Get(0).(func(types.Token, int) []types.Generation); ok {
		r0 = rf(token, clusterSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Generation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(types.Token, int) error); ok {
		r1 = rf(token, clusterSize)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Init provides a mock function with given fields:
func (_m *Client) Init() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IsShuttingDown provides a mock function with given fields:
func (_m *Client) IsShuttingDown() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// LatestGenerations provides a mock function with given fields:
func (_m *Client) LatestGenerations() ([]types.Generation, error) {
	ret := _m.Called()

	var r0 []types.Generation
	if rf, ok := ret.Get(0).(func() []types.Generation); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Generation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MarkAsShuttingDown provides a mock function with given fields:
func (_m *Client) MarkAsShuttingDown() {
	_m.Called()
}

// Offsets provides a mock function with given fields:
func (_m *Client) Offsets() ([]types.OffsetStoreKeyValue, error) {
	ret := _m.Called()

	var r0 []types.OffsetStoreKeyValue
	if rf, ok := ret.Get(0).(func() []types.OffsetStoreKeyValue); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.OffsetStoreKeyValue)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveOffset provides a mock function with given fields: offsetKv
func (_m *Client) SaveOffset(offsetKv *types.OffsetStoreKeyValue) error {
	ret := _m.Called(offsetKv)

	var r0 error
	if rf, ok := ret.Get(0).(func(*types.OffsetStoreKeyValue) error); ok {
		r0 = rf(offsetKv)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewClient(t mockConstructorTestingTNewClient) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
