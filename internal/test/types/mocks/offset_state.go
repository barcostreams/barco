// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	types "github.com/barcostreams/barco/internal/types"
	mock "github.com/stretchr/testify/mock"
)

// OffsetState is an autogenerated mock type for the OffsetState type
type OffsetState struct {
	mock.Mock
}

// Get provides a mock function with given fields: group, topic, token, index, clusterSize
func (_m *OffsetState) Get(group string, topic string, token types.Token, index types.RangeIndex, clusterSize int) (*types.Offset, bool) {
	ret := _m.Called(group, topic, token, index, clusterSize)

	var r0 *types.Offset
	if rf, ok := ret.Get(0).(func(string, string, types.Token, types.RangeIndex, int) *types.Offset); ok {
		r0 = rf(group, topic, token, index, clusterSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Offset)
		}
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(string, string, types.Token, types.RangeIndex, int) bool); ok {
		r1 = rf(group, topic, token, index, clusterSize)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GetAllWithDefaults provides a mock function with given fields: group, topic, token, rangeIndex, clusterSize, policy
func (_m *OffsetState) GetAllWithDefaults(group string, topic string, token types.Token, rangeIndex types.RangeIndex, clusterSize int, policy types.OffsetResetPolicy) []types.Offset {
	ret := _m.Called(group, topic, token, rangeIndex, clusterSize, policy)

	var r0 []types.Offset
	if rf, ok := ret.Get(0).(func(string, string, types.Token, types.RangeIndex, int, types.OffsetResetPolicy) []types.Offset); ok {
		r0 = rf(group, topic, token, rangeIndex, clusterSize, policy)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Offset)
		}
	}

	return r0
}

// Init provides a mock function with given fields:
func (_m *OffsetState) Init() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MaxProducedOffset provides a mock function with given fields: topicId
func (_m *OffsetState) MaxProducedOffset(topicId *types.TopicDataId) (int64, error) {
	ret := _m.Called(topicId)

	var r0 int64
	if rf, ok := ret.Get(0).(func(*types.TopicDataId) int64); ok {
		r0 = rf(topicId)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*types.TopicDataId) error); ok {
		r1 = rf(topicId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Set provides a mock function with given fields: group, topic, value, commit
func (_m *OffsetState) Set(group string, topic string, value types.Offset, commit types.OffsetCommitType) bool {
	ret := _m.Called(group, topic, value, commit)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string, types.Offset, types.OffsetCommitType) bool); ok {
		r0 = rf(group, topic, value, commit)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// String provides a mock function with given fields:
func (_m *OffsetState) String() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

type mockConstructorTestingTNewOffsetState interface {
	mock.TestingT
	Cleanup(func())
}

// NewOffsetState creates a new instance of OffsetState. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewOffsetState(t mockConstructorTestingTNewOffsetState) *OffsetState {
	mock := &OffsetState{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
